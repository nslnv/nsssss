import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message: string, color: keyof typeof colors = 'reset') {
  const timestamp = new Date().toISOString();
  console.log(`${colors[color]}[${timestamp}] ${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
function logError(message: string, error?: Error) {
  log(`‚ùå ERROR: ${message}`, 'red');
  if (error) {
    console.error(colors.red + error.stack + colors.reset);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—Ö–∞
function logSuccess(message: string) {
  log(`‚úÖ ${message}`, 'green');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function logInfo(message: string) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è seeders –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞–ø—É—Å–∫–∞
const SEEDERS = [
  {
    name: 'Admin Users',
    command: 'npx tsx src/db/seeds/admin_users.ts'
  },
  {
    name: 'Site Settings',
    command: 'npx tsx src/db/seeds/site_settings.ts'
  },
  {
    name: 'Site Content',
    command: 'npx tsx src/db/seeds/site_content.ts'
  },
  {
    name: 'Contact Messages',
    command: 'npx tsx src/db/seeds/contact_messages.ts'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ seeder'–∞
async function runSeeder(command: string, name: string) {
  try {
    logInfo(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º seeder: ${name}`);
    const startTime = Date.now();
    
    const { stdout, stderr } = await execAsync(command);
    
    if (stdout) {
      console.log(stdout);
    }
    if (stderr && !stderr.includes('‚úÖ')) {
      console.warn(colors.yellow + stderr + colors.reset);
    }
    
    const duration = Date.now() - startTime;
    logSuccess(`${name} seeder –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –≤ seeder ${name}`, error instanceof Error ? error : new Error(String(error)));
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö seeders
async function runAllSeeders() {
  try {
    logInfo('üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    const startTime = Date.now();

    // –ó–∞–ø—É—Å–∫–∞–µ–º seeders –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (const seeder of SEEDERS) {
      await runSeeder(seeder.command, seeder.name);
    }

    const totalDuration = Date.now() - startTime;
    logSuccess(`üéâ –í—Å–µ seeders –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞ ${totalDuration}ms`);
    
  } catch (error) {
    logError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ seeders', error instanceof Error ? error : new Error(String(error)));
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
function showHelp() {
  console.log(`
${colors.cyan}üìö Database Seeders Manager${colors.reset}

${colors.bright}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${colors.reset}
  npm run seed                    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ seeders
  npm run seed --help            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

${colors.bright}–î–æ—Å—Ç—É–ø–Ω—ã–µ seeders:${colors.reset}
${SEEDERS.map(seeder => `  ${colors.green}${seeder.name}${colors.reset}`).join('\n')}

${colors.bright}–û–ø–∏—Å–∞–Ω–∏–µ:${colors.reset}
  –ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
  - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ (–∫–æ–Ω—Ç–∞–∫—Ç—ã, SEO, –æ–ø–∏—Å–∞–Ω–∏—è)
  - –ö–æ–Ω—Ç–µ–Ω—Ç —Å–∞–π—Ç–∞ (—Ç–µ–∫—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π)
  - –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—ã)

${colors.bright}–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:${colors.reset}
  –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É: /admin
  –õ–æ–≥–∏–Ω: admin
  –ü–∞—Ä–æ–ª—å: admin123
  `);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    const args = process.argv.slice(2);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
    if (args.includes('--help') || args.includes('-h')) {
      showHelp();
      return;
    }

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ seeders
    await runAllSeeders();

  } catch (error) {
    logError('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main()', error instanceof Error ? error : new Error(String(error)));
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...', 'yellow');
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...', 'yellow');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º main –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

export { main, runAllSeeders };